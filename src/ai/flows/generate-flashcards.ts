// src/ai/flows/generate-flashcards.ts
'use server';

/**
 * @fileOverview Flashcard generation AI agent.
 *
 * - generateFlashcards - A function that handles the flashcard generation process.
 * - GenerateFlashcardsInput - The input type for the generateFlashcards function.
 * - GenerateFlashcardsOutput - The return type for the generateFlashcards function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { initializeSrsData } from '@/hooks/use-srs'; // Import SRS initializer
import type { Flashcard as AppFlashcard } from '@/lib/types'; // Import our app's Flashcard type


const GenerateFlashcardsInputSchema = z.object({
  summary: z.string().describe('The summarized content to generate flashcards from.'),
  summaryHash: z.string().optional().describe('A hash of the summary content for associating flashcards.'),
});
export type GenerateFlashcardsInput = z.infer<typeof GenerateFlashcardsInputSchema>;

// AI output schema for basic Q/A
const AIFlashcardSchema = z.object({
    question: z.string().describe('The flashcard question.'),
    answer: z.string().describe('The flashcard answer.'),
});

const AIGenerateFlashcardsOutputSchema = z.object({
  flashcards: z.array(AIFlashcardSchema)
    .describe('An array of question/answer pairs for flashcards generated from the summarized content.'),
});

// Actual function output includes full SRS data
const GenerateFlashcardsOutputSchema = z.object({
    flashcards: z.array(
        z.object({
            id: z.string(),
            question: z.string(),
            answer: z.string(),
            interval: z.number(),
            repetition: z.number(),
            easeFactor: z.number(),
            dueDate: z.number(),
            summaryHash: z.string().optional(),
            lastReviewedDate: z.number().optional(),
        })
    )
});
export type GenerateFlashcardsOutput = z.infer<typeof GenerateFlashcardsOutputSchema>;


export async function generateFlashcards(input: GenerateFlashcardsInput): Promise<GenerateFlashcardsOutput> {
  return generateFlashcardsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateFlashcardsPrompt',
  input: {schema: z.object({ summary: GenerateFlashcardsInputSchema.shape.summary })}, // Only summary needed for AI
  output: {schema: AIGenerateFlashcardsOutputSchema}, // AI returns basic Q/A
  prompt: `You are an expert educator specializing in creating effective flashcards.

  Based on the following summarized content, generate a list of flashcards to help students review and test their knowledge.
  Aim for 5 to 10 flashcards.

  Summary: {{{summary}}}

  Each flashcard should have a question and a concise answer.

  Format the output as a JSON object with a "flashcards" key, which is an array of flashcard objects. Each object must have a "question" and "answer" field.
  `, 
});

const generateFlashcardsFlow = ai.defineFlow(
  {
    name: 'generateFlashcardsFlow',
    inputSchema: GenerateFlashcardsInputSchema,
    outputSchema: GenerateFlashcardsOutputSchema, // Flow returns full SRS data
  },
  async (input) => {
    const {output: aiOutput} = await prompt({ summary: input.summary });
    
    if (!aiOutput || !aiOutput.flashcards) {
        // Handle error or empty response from AI
        return { flashcards: [] };
    }

    // Initialize SRS data for each flashcard generated by AI
    const processedFlashcards: AppFlashcard[] = aiOutput.flashcards.map(q_a_pair => 
        initializeSrsData(q_a_pair, input.summaryHash)
    );
    
    return { flashcards: processedFlashcards };
  }
);
